//SPDX-License-Identifier: MIT
pragma solidity >=0.7.0 <0.9.0;


contract coinFlip {

    address payable public owner;
    event Received(address, uint);
    uint randNonce = 5;

    constructor(){
        //initialized when the contract is deployed
        owner = payable(msg.sender);
    }

    receive() external payable{
        // emit Received(msg.sender, msg.value);
       
    }

    function random() view private returns (uint) {
        //increments nonce when random called to make guessing more difficult
        return uint(keccak256(abi.encodePacked(block.timestamp,
                                          msg.sender,
                                          randNonce))) % 2;
    }

    function getBalance() view public returns(uint256) {  
        return msg.sender.balance;
    }

    function sendEth(address payable receiver, uint multiplier) public payable returns(bool) {
        bool sent = receiver.send(msg.value*multiplier);
        require(sent, "Failed to send Ether");
        return sent;
    }
    
    

    function flip(uint choice) public payable returns(string memory){
         // 1 = heads 0 = tail
        if (sendEth(owner, 1) == true){
            if (choice == random()){
            address payable userAddress = payable(msg.sender);
            sendEth(userAddress, 2);
            return "Correct";
            }
            else{
                return "Wrong";
            }
        }
        else{
            return "Deposit Required";
        }   
    }

   
    
}